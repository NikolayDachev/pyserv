#!/usr/bin/env python
'''
Copyright (c) <2014>, <Nikolay Georgiev Dachev> <nikolay@dachev.info>
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'''


import socket
from Crypto.Cipher import AES
import base64
import sys

def jadm_server(HOST, PORT):

# Enter AES encrypt password
   secret = raw_input('server password: ')
   if len(secret) < 16:
      toadd = 16 - len(secret)
      while toadd != 0:
         secret = secret + '0'
         toadd -= 1
   
   if len(secret) > 16:
      secret = secret[:16]

   print "Please use this server password: %s" % secret

   recvlist = []

   s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   s.bind((HOST, PORT))
   s.listen(1)

   conn, addr = s.accept()
   print('Connected by', addr)

   while True:
# REC
      data = conn.recv(1024)
      print data
      if not data: break
# DEC 
      recvlist.append(aes(data, secret, 'dec'))
      conn.send(data)
   conn.close()

   return recvlist 

def jadm_client(HOST, PORT, sendData):

# ENC
   while True:
      secret = raw_input('server password: ')
      if len(secret) != 16:
         print "ERROR: server password should be 16 symbols, current is: %s" % len(secret)
         continue
      else:
         break
   try:
      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      s.connect((HOST, PORT))
   except socket.error:
      print "No connection to %s:%s" % (HOST, PORT)
      return False

   for i in sendData:
# ENC and SEND
      s.send(aes(i, secret, 'enc'))
      data = s.recv(1024)

def aes(data, secret ,encdec):
   '''
      Original src: http://www.codekoala.com/posts/aes-encryption-python-using-pycrypto/
   '''
   # the block size for the cipher object; must be 16, 24, or 32 for AES
   BLOCK_SIZE = 32

   # the character used for padding--with a block cipher such as AES, the value
   # you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
   # used to ensure that your value is always a multiple of BLOCK_SIZE
   PADDING = '{'

   # one-liner to sufficiently pad the text to be encrypted
   pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

   # one-liners to encrypt/encode and decrypt/decode a string
   # encrypt with AES, encode with base64
   EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
   DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

   # create a cipher object using the random secret
   cipher = AES.new(secret)

   if encdec == 'enc':
      # encode a string
      encoded = EncodeAES(cipher, data)
      return encoded

   if encdec == 'dec':
      # decode the encoded string
      decoded = DecodeAES(cipher, data)
      return decoded


### MAIN ###

if sys.argv[1] == '-s':
    recvData = jadm_server(sys.argv[2], int(sys.argv[3]))
    print recvData

if sys.argv[1] == '-c':

   sendData = []
   for x in sys.argv[4:]:
      sendData.append(x)
   jadm_client(sys.argv[2], int(sys.argv[3]), sendData)
